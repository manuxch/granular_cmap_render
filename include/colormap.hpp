#ifndef COLORMAP_HPP
#define COLORMAP_HPP

#include <algorithm>
#include <array>
#include <vector>

class Colormap {
public:
  // Constructor: recibe stops {pos,[r,g,b]}
  Colormap(const std::vector<std::pair<double, std::array<double, 3>>> &stops)
      : stops(stops) {
    std::sort(this->stops.begin(), this->stops.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
  }

  std::array<double, 3> operator()(double value, double vmin,
                                   double vmax) const {
    double t = (value - vmin) / (vmax - vmin + 1e-12);
    t = std::clamp(t, 0.0, 1.0);

    // buscar intervalo
    for (size_t i = 1; i < stops.size(); i++) {
      if (t <= stops[i].first) {
        double t0 = stops[i - 1].first, t1 = stops[i].first;
        double u = (t - t0) / (t1 - t0 + 1e-12);
        auto c0 = stops[i - 1].second;
        auto c1 = stops[i].second;
        return {(1 - u) * c0[0] + u * c1[0], (1 - u) * c0[1] + u * c1[1],
                (1 - u) * c0[2] + u * c1[2]};
      }
    }
    return stops.back().second;
  }

private:
  std::vector<std::pair<double, std::array<double, 3>>> stops;
};

// Colormaps de ejemplo:
inline Colormap viridis() {
  return Colormap({
    {0.000, {0.267, 0.004, 0.329}},
    {0.111, {0.283, 0.141, 0.458}},
    {0.222, {0.254, 0.265, 0.530}},
    {0.333, {0.207, 0.372, 0.553}},
    {0.444, {0.153, 0.468, 0.557}},
    {0.556, {0.122, 0.543, 0.544}},
    {0.667, {0.173, 0.622, 0.494}},
    {0.778, {0.337, 0.706, 0.414}},
    {0.889, {0.592, 0.776, 0.318}},
    {1.000, {0.993, 0.906, 0.144}}
  });
}

inline Colormap inferno() {
  return Colormap({
    {0.000, {0.002, 0.000, 0.014}},
    {0.111, {0.087, 0.016, 0.232}},
    {0.222, {0.245, 0.033, 0.206}},
    {0.333, {0.395, 0.068, 0.349}},
    {0.444, {0.552, 0.105, 0.388}},
    {0.556, {0.710, 0.167, 0.352}},
    {0.667, {0.847, 0.257, 0.262}},
    {0.778, {0.934, 0.391, 0.210}},
    {0.889, {0.976, 0.568, 0.253}},
    {1.000, {0.988, 0.998, 0.645}}
  });
}

inline Colormap RdYlBu() {
  return Colormap({
    {0.000, {0.647, 0.000, 0.149}},
    {0.111, {0.843, 0.188, 0.153}},
    {0.222, {0.957, 0.427, 0.263}},
    {0.333, {0.992, 0.682, 0.380}},
    {0.444, {0.998, 0.851, 0.561}},
    {0.556, {0.878, 0.953, 0.973}},
    {0.667, {0.670, 0.851, 0.914}},
    {0.778, {0.455, 0.678, 0.820}},
    {0.889, {0.271, 0.459, 0.706}},
    {1.000, {0.192, 0.212, 0.584}}
  });
}

inline Colormap Greens() {
  return Colormap({
    {0.000, {0.969, 0.988, 0.961}},
    {0.111, {0.898, 0.961, 0.878}},
    {0.222, {0.784, 0.925, 0.753}},
    {0.333, {0.631, 0.851, 0.608}},
    {0.444, {0.455, 0.769, 0.463}},
    {0.556, {0.255, 0.671, 0.306}},
    {0.667, {0.137, 0.545, 0.271}},
    {0.778, {0.000, 0.427, 0.173}},
    {0.889, {0.000, 0.267, 0.106}},
    {1.000, {0.000, 0.137, 0.055}}
  });
}

inline Colormap Reds() {
  return Colormap({
    {0.000, {1.000, 0.961, 0.941}},
    {0.111, {0.996, 0.878, 0.824}},
    {0.222, {0.988, 0.733, 0.631}},
    {0.333, {0.988, 0.573, 0.447}},
    {0.444, {0.984, 0.416, 0.290}},
    {0.556, {0.937, 0.231, 0.173}},
    {0.667, {0.796, 0.094, 0.114}},
    {0.778, {0.647, 0.059, 0.082}},
    {0.889, {0.404, 0.000, 0.051}},
    {1.000, {0.220, 0.000, 0.031}}
  });
}

inline Colormap winter() {
  return Colormap({
    {0.000, {0.000, 0.000, 1.000}},
    {0.111, {0.000, 0.111, 0.944}},
    {0.222, {0.000, 0.222, 0.889}},
    {0.333, {0.000, 0.333, 0.833}},
    {0.444, {0.000, 0.444, 0.778}},
    {0.556, {0.000, 0.556, 0.722}},
    {0.667, {0.000, 0.667, 0.667}},
    {0.778, {0.000, 0.778, 0.611}},
    {0.889, {0.000, 0.889, 0.556}},
    {1.000, {0.000, 1.000, 0.500}}
  });
}

inline Colormap autumn() {
  return Colormap({
    {0.000, {1.000, 0.000, 0.000}},
    {0.111, {1.000, 0.111, 0.000}},
    {0.222, {1.000, 0.222, 0.000}},
    {0.333, {1.000, 0.333, 0.000}},
    {0.444, {1.000, 0.444, 0.000}},
    {0.556, {1.000, 0.556, 0.000}},
    {0.667, {1.000, 0.667, 0.000}},
    {0.778, {1.000, 0.778, 0.000}},
    {0.889, {1.000, 0.889, 0.000}},
    {1.000, {1.000, 1.000, 0.000}}
  });
}

// Colormaps secuenciales adicionales
inline Colormap Blues() {
  return Colormap({
    {0.000, {0.969, 0.984, 1.000}},
    {0.111, {0.871, 0.922, 0.969}},
    {0.222, {0.776, 0.859, 0.937}},
    {0.333, {0.619, 0.792, 0.882}},
    {0.444, {0.420, 0.682, 0.839}},
    {0.556, {0.259, 0.573, 0.776}},
    {0.667, {0.129, 0.443, 0.710}},
    {0.778, {0.031, 0.318, 0.612}},
    {0.889, {0.031, 0.188, 0.420}},
    {1.000, {0.015, 0.094, 0.235}}
  });
}

inline Colormap hot() {
  return Colormap({
    {0.000, {0.041, 0.000, 0.000}},
    {0.143, {0.504, 0.000, 0.000}},
    {0.286, {1.000, 0.251, 0.000}},
    {0.429, {1.000, 0.504, 0.000}},
    {0.571, {1.000, 0.757, 0.000}},
    {0.714, {1.000, 1.000, 0.251}},
    {0.857, {1.000, 1.000, 0.504}},
    {1.000, {1.000, 1.000, 1.000}}
  });
}

#endif
